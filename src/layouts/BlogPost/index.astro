---
import AuthorCard from '../../components/AuthorCard/index.astro';
import PostCard from '../../components/PostCard/index.astro';
import PostHeader from '../../components/PostHeader/index.astro';
import SkipToContent from '../../components/SkipToContent/index.astro';
import TagList from '../../components/TagList/index.astro';
import type { RelatedPost } from '../../utils/post';
import BaseLayout from '../Base/index.astro';

import './code.css';
import './styles.css';

interface Props {
	title: string;
	summary: string;
	canonicalUrl?: string;
	authors: string[];
	image?: ImageMetadata;
	imageAlt?: string;
	createdAt: Date;
	updatedAt?: Date;
	updates?: { date: Date, changes: string }[];
	tags?: string[];
	url: string;
	relatedPosts?: RelatedPost[];
	readingTime?: number;
	wordCount?: number;
	letterCount?: number;
}

const BLOG_URL = Astro.site?.href;

const {
	url,
	title,
	summary,
	canonicalUrl,
	authors,
	image,
	imageAlt,
	createdAt,
	updatedAt,
	updates,
	tags,
	readingTime,
	wordCount,
	letterCount,
	relatedPosts
} = Astro.props;

const postUrl = `${BLOG_URL}${url}`;
const dateFormatter = new Intl.DateTimeFormat('en-US', {
	dateStyle: 'long',
	timeStyle: 'short'
});
---
<BaseLayout
	htmlTitle={[title, 'TorontoJS Blog']}
	{title}
	description={summary}
	{authors}
	{tags}
	url={postUrl}
	canonicalUrl={canonicalUrl}
	image={image?.src}
	{imageAlt}
	{createdAt}
	{updatedAt}
	pageSchema="BlogPosting"
	hasFeed={true}
>
	<SkipToContent
		slot="header"
		title="Skip to post content"
		target="post-contents"
	/>
	<PostHeader
		slot="header"
		url={postUrl}
		{title}
		{summary}
		{image}
		{imageAlt}
		{createdAt}
		{updatedAt}
		hasUpdates={updates && updates.length > 0}
		{readingTime}
		{wordCount}
		{letterCount}
		{authors}
	/>

	<article id="post-contents" itemprop="articleBody" class="e-content">
		{
			updates && (
				<aside id="update-history">
					<details open>
						<summary>Update History</summary>
						<ul>
							{
								updates.map((update) => (
									<li>
										<time
											datetime={update.date.toISOString()}
											title={update.date.toISOString()}
										>
											{dateFormatter.format(update.date)}
										</time>
										<span>&mdash;</span>
										<span>{update.changes}</span>
									</li>
								))
							}
						</ul>
					</details>
				</aside>
			)
		}

		<slot></slot>
	</article>

	<hr />

	<Fragment slot="footer" id="post-footer">
		<div id="author-cards-wrapper">
			{authors.map((author) => <AuthorCard {author} />)}
		</div>

		{
			tags && tags.length > 0 && (
				<TagList
					tags={Object.fromEntries(tags.map((tag) => [tag, `${BLOG_URL}tags/${tag}`]))}
					isOpen={true}
				/>
			)
		}

		{
			relatedPosts && relatedPosts.length > 0 && (
				<details id="related-posts" open>
					<summary id="related-posts-title">Related Posts</summary>
					<div id="related-posts-wrapper">
						<nav aria-labelledby="related-posts-title">
							<ul>
								{
									relatedPosts.map((post) => (
										<li>
											<PostCard
												variant="small"
												url={`${BLOG_URL}${post.url}`}
												title={post.title}
												image={post.image}
												imageAlt={post.imageAlt}
												createdAt={post.createdAt}
											>
												<span slot="title">{post.title}</span> {post.summary}
											</PostCard>
										</li>
									))
								}
							</ul>
						</nav>
					</div>
				</details>
			)
		}

		<aside id="post-license">
			<small><em>Unless otherwise noted, all content on this site is licensed under a <a href={`${BLOG_URL}license`} class="u-license"
					>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</em></small>
		</aside>
	</Fragment>
</BaseLayout>
